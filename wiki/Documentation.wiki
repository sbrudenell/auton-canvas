= basics =

an !AutonCanvas lives on a webpage as a rectangular drawing canvas. you can only draw within the canvas, but you can always resize it with `canvas.width()` and `canvas.height()`.

!AutonCanvas uses a retained drawing model -- you create child [#CanvasNode CanvasNode]s ([#auton.canvas.Path Path]s, [#auton.canvas.Image Image]s, [#auton.canvas.Text Text], or [#auton.canvas.Group Group]s of other [#CanvasNode CanvasNode]s), then set and update their properties. these objects live in a hierarchy, with a [#auton.canvas.Canvas Canvas] instance at the root.

[#CanvasNode CanvasNode]s _are not DOM elements_; you cannot attach them to your page arbitrarily.

= transformations =

[#CanvasNode CanvasNode]s can be scaled or moved around, but _not rotated_.

unlike [http://www.w3.org/TR/SVG/ SVG] elements, [#CanvasNode CanvasNode]s _don't have a full transformation matrix_. they just have a stored scale and translation.

unlike [http://www.w3.org/TR/SVG/ SVG] paths, _[#auton.canvas.Path Path] stroke lines never scale_. the default 1-pixel [#auton.canvas.Path Path] stroke will be 1 pixel wide even when the path is scaled by 10.

= path colors =

[#auton.canvas.Path Path] colors are passed as `String`s.

in the VML implementation, !AutonCanvas has special logic to handle `"rgba(...)"` strings, and the special string `"transparent"`, so alpha-blended [#auton.canvas.Path Path]s can be created in Internet Explorer 6-8.

in all other cases, color `String`s are passed directly to the browser. it's a good idea to use HTML color strings like `"#0a0"`, which work in all browsers.

as of version 1.2, !AutonCanvas _does not_ specially handle `"hsl(...)"` or `"hsla(...)"` color strings.

= path fills =

[#auton.canvas.Path Path]s support two styles of fill: simple (solid) fills, and two-tone linear gradient fills.

a simple fill is passed as just a [#path-colors color string]:

{{{
// transparent green fill
path.fill('rgba(0, 60%, 0, 0.5)');
}}}

a linear gradient fill is passed as an `Array` of two [#path-colors color strings], and an optional angle:

{{{
// fill fades from transparent to black, from bottom to top
path.fill(['transparent', 'black'], Math.PI / 2);
}}}

= path data =

[#auton.canvas.Path Path]s are the most expressive objects in !AutonCanvas. they can draw arbitrary shapes, described by a language modeled on [http://www.w3.org/TR/SVG/paths.html#PathData SVG's path language].

in !AutonCanvas, path data is passed as an `Array` instead of a `String`. in a data array, a path instruction is followed by a variable number of arguments. for example:

{{{
// a circle, overlapping a square

var data = [
  'M', 0, 0,
  'L', 0, 100,
  'L', 100, 100,
  'L', 100, 0,
  'L', 0, 0,
  'E',
  'R', 100, 100, 50
];
}}}

the above data would draw a circle of radius `50` centered on `100,100`, overlapping a square from `0,0` to `100,100`. note how the `'R'` instruction takes 3 arguments, `'M'` and `'L'` take two, and `'E'` takes none.

= batch drawing =

for efficiency and visual consistency, any changes to the canvas are automatically batched together using a javascript timer. you can also force any pending canvas changes using `canvas.draw()`.

you normally never need to call `canvas.draw()`. it's most useful when dealing with timing issues in different browsers, when timer events don't fire fast enough.

= jQuery code conventions =

like [http://jquery.com/ jQuery], most methods in !AutonCanvas double as both setters and getters, depending on whether an argument is passed ("`canvas.width(300)`" versus "`var w = canvas.width()`").

similar to [http://jquery.com/ jQuery], all methods with no return value return `this`. you can use shorthand like `canvas.width(300).draw()`.

= reference =

== auton.canvas.Canvas ==

extends [#auton.canvas.Group Group].

*description*: a rectangular drawing canvas on a page. this is the attachment point for all other [#CanvasNode CanvasNode]s.

|| *constructor* || *description* || *since* ||
|| `Canvas(width?:Number, height?:Number, element?:Node)` || creates a new `Canvas` of `width` pixels by `height` pixels (defaults to 300x150), attached to `element`. || 1.0 ||

|| *accessor* || *type* || *description* || *default* || *since* ||
|| `element()` || `Node` || returns the root element. read-only. || _implementation-defined_ || 1.0 ||
|| `width(width?:Number)` || `Number` || sets or gets the current width, in pixels. the width is not changed immediately; it is changed the next time the canvas is drawn. || `300` || 1.0 ||
|| `height(height?:Number)` || `Number` || sets or gets the current height, in pixels. the height is not changed immediately; it is changed the next time the canvas is drawn. || `150` || 1.0 ||

|| *method* || *description* || *since* ||
|| `draw()` || forces all pending changes to be drawn immediately. || 1.0 ||
|| `onAttach()` || TODO || 1.2 ||
|| `onDetach()` || TODO || 1.2 ||

== auton.canvas.Group ==

extends [#CanvasNode CanvasNode].

*description*: a group of other objects. especially useful for applying [#transformations transformations] to many other objects.

|| *constructor* || *description* || *since* ||
|| `Group()` || creates a new `Group` || 1.0 ||

|| *method* || *return type* || *description* || *since* ||
|| `text(text?:String, font?:String, align?:String, valign?:String)` || [#auton.canvas.Text Text] || creates a new [#auton.canvas.Text Text], adds it to this `Group`, and returns it. || TODO ||
|| `image(src?:String)` || [#auton.canvas.Image Image] || creates a new [#auton.canvas.Image Image], adds it to this `Group`, and returns it. || TODO ||
|| `path(data?:Array)` || [#auton.canvas.Path Path] || creates a new [#auton.canvas.Path Path], adds it to this `Group`, and returns it. || 1.0 ||
|| `group()` || [#auton.canvas.Group Group] || creates a new [#auton.canvas.Group Group], adds it to this one, and returns the new child [#auton.canvas.Group Group]. || 1.0 ||
|| `add(child:CanvasNode)` || `this` || adds an existing [#CanvasNode CanvasNode] as a child at the end of this [#auton.canvas.Group Group]. equivalent to `insertBefore(child, undefined)`. || 1.0 ||
|| `insertBefore(child:CanvasNode, before?)` || `this` || inserts an existing [#CanvasNode CanvasNode] as a child of this [#auton.canvas.Group Group], such that it occurs before `before`. `before` may be a `Number` specifying an index, or another child [#CanvasNode CanvasNode]. if `before` is unspecified or doesn't refer to a known child, then `child` is inserted at the end of this [#auton.canvas.Group Group] || 1.0 ||
|| `remove(child:CanvasNode)` || `this` || removes a child [#CanvasNode CanvasNode]. || 1.0 ||
|| `clear()` || `this` || removes all child [#CanvasNode CanvasNode]s. || 1.0 ||

== auton.canvas.Path ==

extends [#CanvasNode CanvasNode].

*description*: an arbitrary shape. accepts a simple path language modeled on [http://www.w3.org/TR/SVG/paths.html#PathData SVG's path language]. see [#path-data path data].

|| *instruction* || *name* || *arguments* || *description* || *since* ||
|| *`M`* || moveto || `x`, `y` || begins a new sub-path at `x,y`. || 1.0 ||
|| *`L`* || lineto || `x`, `y` || draws a line from the current point to `x,y`. || 1.0 ||
|| *`R`*, *`r`* || circleat, cwcircleat || `x`, `y`, `radius` || begins a new sub-path, and draws a circle centered at `x,y` with radius `radius`. `*R*` and *`r`* draw anticlockwise and clockwise circles, respectively. || 1.0 ||
|| *`E`* || delimit || _none_ || fills the current set of sub-paths with the path's fill, and begins a new set of sub-paths. || 1.0 ||

|| *constructor* || *description* || *since* ||
|| `Path(data?:Array)` || creates a new [#auton.canvas.Path Path], with the given `data`. see [#path-data path data]. || 1.0 ||

|| *accessor* || *type* || *description* || *default* || *since* ||
|| `data(data?:Array)` || `Array` || sets or gets the path data. see [#path-data path data]. || `[]` || 1.0 ||
|| `fill(fill?, angle?:Number)` || `Array` or `String` || sets or gets the fill. see [#path-fills path fills]. || `undefined` || 1.0 ||
|| `stroke(stroke?:String)` || `String` || sets or gets the stroke color. see [#path-colors path colors]. || `black` || 1.0 ||
|| `strokeWidth(strokeWidth?:Number)` || `Number` || sets or gets the stroke width, in pixels. see [#transformations transformations]. || `1` || 1.0 ||
|| `bounds(minX?:Number, minY?:Number, maxX?:Number, maxY?:Number)` || `Array` || sets or gets the coordinate bounds of the path data. see TODO. || `[0, 0, 0, 0]` || 1.0 ||
|| `keep(keep?:Boolean)` || `Boolean` || sets or gets whether the [#auton.canvas.Path Path] should retain its `data` array after drawing. see TODO. || `false` || TODO ||

|| *method* || *description* || *since* ||
|| `clear()` || clears the path data. || 1.0 ||